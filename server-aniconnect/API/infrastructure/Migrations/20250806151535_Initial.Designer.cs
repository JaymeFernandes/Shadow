// <auto-generated />
using System;
using Infrastructure.Contexts.Content;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ContentAppContext))]
    [Migration("20250806151535_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Content.Common.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Psychological"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Slice of Life"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Mecha"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Military"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Martial Arts"
                        },
                        new
                        {
                            Id = 20,
                            Name = "School Life"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Magic"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Dementia"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Game"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Survival"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Apocalypse"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Post-Apocalyptic"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Space"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Time Travel"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Isekai"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Reincarnation"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Parallel Worlds"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Demons"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Vampires"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Zombies"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Aliens"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Mythology"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Gods"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Cultivation"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Superpower"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Cyberpunk"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Steampunk"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Political"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Philosophy"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Tragedy"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Dark Fantasy"
                        },
                        new
                        {
                            Id = 48,
                            Name = "High Fantasy"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Urban Fantasy"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Light Novel"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Shounen"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Shoujo"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Seinen"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Josei"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Harem"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Reverse Harem"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Ecchi"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Fanservice"
                        },
                        new
                        {
                            Id = 59,
                            Name = "BL (Boys Love)"
                        },
                        new
                        {
                            Id = 60,
                            Name = "GL (Girls Love)"
                        },
                        new
                        {
                            Id = 61,
                            Name = "LGBTQIA+"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Drama Family"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Friendship"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Revenge"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Anti-Hero"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Healing"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Coming of Age"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Satire"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Parody"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Post-Truth"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Psychological Horror"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Psychological Thriller"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Noir"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Experimental"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Abstract"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Virtual Reality"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Augmented Reality"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Post-Human"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Meta"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Fourth Wall"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Breaking the Fourth Wall"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Memoir"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Fantasy Comedy"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Fantasy Romance"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Romantic Comedy"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Action Comedy"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Action Romance"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Supernatural Mystery"
                        });
                });

            modelBuilder.Entity("Domain.Models.Content.Common.Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("Domain.Models.Content.Common.RelationObject.CategoryByContent", b =>
                {
                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ContentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryByContent", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Content.Common.RelationObject.TagByContent", b =>
                {
                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("ContentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagByContent", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Content.Common.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Content.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<long>("TotalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsersAvaliable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Domain.Models.Content.Metadata.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("HeightCm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ZodiacSign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Domain.Models.Content.Metadata.BackGround", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.ToTable("BackGrounds");
                });

            modelBuilder.Entity("Domain.Models.Content.Metadata.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<int>("HeightCm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ZodiacSign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Domain.Models.Content.Metadata.Cover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.ToTable("Covers");
                });

            modelBuilder.Entity("Domain.Models.Content.Metadata.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Domain.Models.Content.Metadata.RelationObject.CharacterByActor", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid");

                    b.HasKey("CharacterId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("CharacterByActor", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Content.Season.Aggregator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Aggregators");
                });

            modelBuilder.Entity("Domain.Models.Content.Season.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<double>("Sequence")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("SeasonId", "Sequence")
                        .IsUnique();

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Domain.Models.Content.Season.ExternalLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AggregatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AggregatorId");

                    b.HasIndex("ContentId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("Domain.Models.Content.Season.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<int>("SeasonNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Domain.Models.Content.Common.Name", b =>
                {
                    b.HasOne("Domain.Models.Content.Content", null)
                        .WithMany("Names")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Content.Common.RelationObject.CategoryByContent", b =>
                {
                    b.HasOne("Domain.Models.Content.Common.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Content.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Content.Common.RelationObject.TagByContent", b =>
                {
                    b.HasOne("Domain.Models.Content.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Content.Common.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Content.Common.Tag", b =>
                {
                    b.HasOne("Domain.Models.Content.Content", null)
                        .WithMany("Tags")
                        .HasForeignKey("ContentId");
                });

            modelBuilder.Entity("Domain.Models.Content.Metadata.Character", b =>
                {
                    b.HasOne("Domain.Models.Content.Content", "Content")
                        .WithMany("Characters")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.Models.Content.Metadata.Media", b =>
                {
                    b.HasOne("Domain.Models.Content.Content", "Content")
                        .WithMany("Medias")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.Models.Content.Metadata.RelationObject.CharacterByActor", b =>
                {
                    b.HasOne("Domain.Models.Content.Metadata.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Content.Metadata.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Content.Season.Episode", b =>
                {
                    b.HasOne("Domain.Models.Content.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Content.Season.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Domain.Models.Content.Season.ExternalLink", b =>
                {
                    b.HasOne("Domain.Models.Content.Season.Aggregator", "Aggregator")
                        .WithMany("ExternalLinks")
                        .HasForeignKey("AggregatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Content.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Content.Season.Episode", "Episode")
                        .WithMany("ExternalLinks")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aggregator");

                    b.Navigation("Content");

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("Domain.Models.Content.Season.Season", b =>
                {
                    b.HasOne("Domain.Models.Content.Content", "Content")
                        .WithMany("Seasons")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.Models.Content.Content", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Medias");

                    b.Navigation("Names");

                    b.Navigation("Seasons");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Models.Content.Season.Aggregator", b =>
                {
                    b.Navigation("ExternalLinks");
                });

            modelBuilder.Entity("Domain.Models.Content.Season.Episode", b =>
                {
                    b.Navigation("ExternalLinks");
                });

            modelBuilder.Entity("Domain.Models.Content.Season.Season", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
